// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/26/2025 20:13:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    comparateur
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module comparateur_vlg_sample_tst(
	touche,
	sampler_tx
);
input [3:0] touche;
output sampler_tx;

reg sample;
time current_time;
always @(touche)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module comparateur_vlg_check_tst (
	LedR,
	LedV,
	Sortie,
	sampler_rx
);
input  LedR;
input  LedV;
input  Sortie;
input sampler_rx;

reg  LedR_expected;
reg  LedV_expected;
reg  Sortie_expected;

reg  LedR_prev;
reg  LedV_prev;
reg  Sortie_prev;

reg  LedR_expected_prev;
reg  LedV_expected_prev;
reg  Sortie_expected_prev;

reg  last_LedR_exp;
reg  last_LedV_exp;
reg  last_Sortie_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	LedR_prev = LedR;
	LedV_prev = LedV;
	Sortie_prev = Sortie;
end

// update expected /o prevs

always @(trigger)
begin
	LedR_expected_prev = LedR_expected;
	LedV_expected_prev = LedV_expected;
	Sortie_expected_prev = Sortie_expected;
end



// expected LedR
initial
begin
	LedR_expected = 1'bX;
end 

// expected LedV
initial
begin
	LedV_expected = 1'bX;
end 

// expected Sortie
initial
begin
	Sortie_expected = 1'bX;
end 
// generate trigger
always @(LedR_expected or LedR or LedV_expected or LedV or Sortie_expected or Sortie)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LedR = %b | expected LedV = %b | expected Sortie = %b | ",LedR_expected_prev,LedV_expected_prev,Sortie_expected_prev);
	$display("| real LedR = %b | real LedV = %b | real Sortie = %b | ",LedR_prev,LedV_prev,Sortie_prev);
`endif
	if (
		( LedR_expected_prev !== 1'bx ) && ( LedR_prev !== LedR_expected_prev )
		&& ((LedR_expected_prev !== last_LedR_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LedR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LedR_expected_prev);
		$display ("     Real value = %b", LedR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LedR_exp = LedR_expected_prev;
	end
	if (
		( LedV_expected_prev !== 1'bx ) && ( LedV_prev !== LedV_expected_prev )
		&& ((LedV_expected_prev !== last_LedV_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LedV :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LedV_expected_prev);
		$display ("     Real value = %b", LedV_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LedV_exp = LedV_expected_prev;
	end
	if (
		( Sortie_expected_prev !== 1'bx ) && ( Sortie_prev !== Sortie_expected_prev )
		&& ((Sortie_expected_prev !== last_Sortie_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sortie :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sortie_expected_prev);
		$display ("     Real value = %b", Sortie_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Sortie_exp = Sortie_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module comparateur_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] touche;
// wires                                               
wire LedR;
wire LedV;
wire Sortie;

wire sampler;                             

// assign statements (if any)                          
comparateur i1 (
// port map - connection between master ports and signals/registers   
	.LedR(LedR),
	.LedV(LedV),
	.Sortie(Sortie),
	.touche(touche)
);
// touche[ 3 ]
initial
begin
	touche[3] = 1'b0;
end 
// touche[ 2 ]
initial
begin
	touche[2] = 1'b0;
end 
// touche[ 1 ]
initial
begin
	touche[1] = 1'b0;
end 
// touche[ 0 ]
initial
begin
	touche[0] = 1'b1;
end 

comparateur_vlg_sample_tst tb_sample (
	.touche(touche),
	.sampler_tx(sampler)
);

comparateur_vlg_check_tst tb_out(
	.LedR(LedR),
	.LedV(LedV),
	.Sortie(Sortie),
	.sampler_rx(sampler)
);
endmodule

